#!/usr/bin/python

class BuildLogChecker:
    """ Reads the build log (generated by build-repo command, compares it to
    list of known broken packages and preformat the results to easy to eat 
    way for robot framework.
    """
    
    def __init__(self, buildlog, broken):
        """ Read and parse buildlog and broken package list
        """
        self._builds = {}
	with open(buildlog, 'r') as log:
            for line in log:
                (pack, product, status) = line.strip().split(':')
                if not pack in self._builds:
                    self._builds[pack] = {}
		if status == 'fail':
                    self._builds[pack][product] = False
                else:	
                    self._builds[pack][product] = True
        self._broken = {}
        with open(broken, 'r') as br:
            for line in br:
		line = line.strip()
		if len(line) > 0 and not line.startswith('#'):
                    (pack, products) = line.split(':')
                    self._broken[pack] = products


    def get_build_results(self):
        return self._builds

    def get_broken_list(self):
        return self._broken()

    def get_packages(self):
        return self._builds.keys()

    def get_products(self):
        return self._builds.values()[0].keys()

    def check_package_build_build_status(self, pack, product):
        listed = pack in self._broken and (product in self._broken[pack] or '*' in self._broken[pack])
        if self._builds[pack][product] and listed:
           raise AssertionError("Package " + pack + " on " + product + " build suceeded, but it was unexpected.")
        elif not self._builds[pack][product] and not listed:
           raise AssertionError("Package " + pack + " on " + product + " build failed.")

