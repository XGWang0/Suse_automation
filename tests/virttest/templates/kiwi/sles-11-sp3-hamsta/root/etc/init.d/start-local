#!/bin/sh

### BEGIN INIT INFO
# Provides:          start-local
# Required-Start:    $all
# Required-Stop:    
# Default-Start:     3 5
# Short-Description: QA automation scripts to run on boot
# Description:       QA automation scripts to run on boot
### END INIT INFO

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     be verbose in local rc status and clear it afterwards
#      rc_status -v -r  ditto and clear both the local and overall rc status
#      rc_status -s     display "skipped" and exit with status 3
#      rc_status -u     display "unused" and exit with status 3
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num>
#      rc_reset         clear both the local and overall rc status
#      rc_exit          exit appropriate to overall rc status
#      rc_active        checks whether a service is activated by symlinks
. /etc/rc.status

# Reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0	  - success
# 1       - generic or unspecified error
# 2       - invalid or excess argument(s)
# 3       - unimplemented feature (e.g. "reload")
# 4       - user had insufficient privileges
# 5       - program is not installed
# 6       - program is not configured
# 7       - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.

case "$1" in
    start)
	# Execute the QA Automation first boot script, if it exists
	if [ -f /etc/init.d/qaa_firstboot ]; then
		echo "Starting firstboot scripts"
  		sh /etc/init.d/qaa_firstboot 
  		mv /etc/init.d/qaa_firstboot /etc/init.d/qaa_firstboot.done
	fi
	echo -n "Starting repoindexing scripts"
	python /srv/www/htdocs/hamsta/update-repo-index.py -r {{ proxy.urlmap['slp'] }} -s {{ proxy.urlmap['slp'] }} -o /srv/www/htdocs/hamsta/virtenv
	
	# Remember status and be verbose
	rc_status -v
	;;
    stop)
	/bin/true
	# Remember status and be verbose
	rc_status -v
	;;
    try-restart|condrestart)
	/bin/true
	# Remember status and be verbose
	rc_status -v
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start

	# Remember status and be quiet
	rc_status
	;;
    force-reload)
	$0 restart
	rc_status
	;;
    reload)
	## Otherwise if it does not support reload:
	rc_failed 3
	rc_status -v
	;;
    status)
	/bin/true
	# Remember status and be verbose
	rc_status -v
	
	;;
    *)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|}"
	exit 1
	;;
esac
rc_exit
