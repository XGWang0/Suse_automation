<?xml version="1.0"?>
<job>
    <config>
        <name>QA_KERNEL_launch_all_test_sles11-sp2</name>
        <debuglevel>4</debuglevel>
        <distributable>0</distributable>
        <parallel>0</parallel>
        <mail notify="1"></mail>
	<rpm>qa_hamsta qa_tools</rpm>
        <logdir>/tmp</logdir>
        <description>SLES11-SP2 QA kernel test</description>
        <motd>[Custom job]: SLES11-SP2 QA kernel test is running</motd>
        <reboot>0</reboot>
    </config>

    <commands>
        <worker>
            <!-- Required -->
	    <command execution="forked"><![CDATA[#!/bin/bash 

ARCH=$HOSTTYPE
if [ "$ARCH" != "" ]; then
        echo "architecture is $ARCH"
        case $ARCH in
        i[3-9]86)  ARCH="i586";;
        p*pc) ARCH="ppc";;
        p*pc64) ARCH="ppc64";;
        esac
else
        echo "cannot determine architecture";
        exit 1
fi

release=`egrep -o '[aA]lpha[1-9]|[bB]eta[1-9]|RC[1-9]' /etc/issue`

if [ -z "$release" ]; then
        release="GM"
fi

mkdir -p /mounts/dist
ipaddr_list=`ifconfig | grep "inet addr" | cut -d":" -f 2 | cut -d " " -f 1`
if echo $ipaddr_list | grep "147\.2\." &>/dev/null;then
        mount -t nfs 147.2.207.208:/srv/ftp/dist /mounts/dist
	zypper --no-gpg-checks -n ar http://147.2.207.208/dist/install/SLP/SLE-11-SP2-SDK-$release/$ARCH/DVD1 sle11-sp2-sdk
else
	mount -t nfs dist.suse.de:/dist /mounts/dist
	if [ $ARCH != "i586" ];then
		zypper --no-gpg-checks -n ar http://dist.suse.de/install/SLP/SLE-11-SP2-SDK-$release/$ARCH/DVD1 sle11-sp2-sdk
	else
		zypper --no-gpg-checks -n ar http://dist.suse.de/install/SLP/SLE-11-SP2-SDK-$release/i386/DVD1 sle11-sp2-sdk
	fi
fi

zypper -n ref

TEST_PACKAGES="qa_test_ftpload qa_test_ltp qa_test_fs_stress qa_test_process_stress qa_test_sched_stress qa_test_bind qa_test_openssh qa_test_net-snmp qa_test_cpio qa_test_nfs qa_test_findutils qa_test_indent qa_test_sharutils qa_test_gzip qa_test_postfix qa_test_fetchmail qa_test_php5 qa_test_php5-server qa_test_cracklib qa_test_coreutils qa_test_apache_testsuite qa_test_sysbench qa_test_lmbench qa_test_bonnie qa_test_dbench qa_test_interbench qa_test_kernbench qa_test_libmicro qa_test_reaim qa_test_siege qa_test_tiobench qa_test_bzip2 qa_test_newburn qa_test_newburn-memtst qa_test_netperf qa_test_memeat qa_test_memtester qa_test_autotest qa_test_apparmor qa_test_apparmor-profiles"
ADDITIONAL_PACKAGES="gcc bind mysql pure-ftpd perl-Expect perl-DBD-mysql apache2 mysql-client php5 php5-wddx php5-ctype php5-mbstring php5-bz2 php5-bcmath php5-dbase php5-exif php5-gd php5-gettext php5-gmp php5-mcrypt php5-shmop php5-sysvshm php5-sysvsem php5-zlib php5-calendar php5-iconv php5-tokenizer php5-dom php5-soap php5-sysvmsg php5-xsl php5-mysql apache2-mod_php5 apache2-mod_perl apache2-mod_python apache2-worker perl-IO-Socket-SSL net-snmp findutils-locate fetchmail cyrus-imapd gcc-c++ automake autoconf g3utils postgresql-libs glibc-devel mgetty postgresql kernel-source libexpat-devel hwinfo hwinfo-devel postgresql-devel tack ncurses-devel readline-devel expect python nfs-kernel-server zlib-devel libopenssl-devel libbz2-devel dejagnu indent cyrus-sasl-devel openldap2-devel libapr1-devel libapr-util1-devel apache2-devel popt-devel rpm-devel tcpd-devel net-snmp-devel sqlite2 php5-sqlite" 
OTHER_QA_PACKAGES="qa_lib_ctcs2 qa_lib_keys qa_lib_perl qa_lib_config qa_tools qa_db_report qa_lib_internalapi"


[ $ARCH != "s390x" ] && ADDITIONAL_PACKAGES="$ADDITIONAL_PACKAGES libsensors3-devel"

zypper -n in -l $TEST_PACKAGES $ADDITIONAL_PACKAGES $OTHER_QA_PACKAGES


#specify for s390x arch
if [ "$ARCH" = "s390x" ] ; then
        cp  /usr/share/qa/tcf/fs_stress.tcf /usr/share/qa/tcf/fs_stress.tcf.bak
	if [ ! "`grep abuild /usr/share/qa/tcf/fs_stress.tcf`" ] ; then
        sed -i '/^fg/s/$/ -d \/abuild/' /usr/share/qa/tcf/fs_stress.tcf
	rm /usr/lib/ctcs2/tcf/fs_stress.tcf && cp /usr/share/qa/tcf/fs_stress.tcf /usr/lib/ctcs2/tcf/fs_stress.tcf 
	fi

        cp /usr/lib/ctcs2/tcf/tiobench.tcf /usr/lib/ctcs2/tcf/tiobench.tcf.bak  
	if [ ! "`grep abuild /usr/lib/ctcs2/tcf/tiobench.tcf`" ] ; then
	sed -i '/^fg/s/$/ --dir \/abuild/' /usr/lib/ctcs2/tcf/tiobench.tcf 
	fi

        cp /usr/lib/reaim/reaim.config /usr/lib/reaim/reaim.config.bak  
	if [ ! "`grep abuild /usr/lib/reaim/reaim.config`" ] ; then
	sed -i '/^DISKDIR/s/tmp/abuild/' /usr/lib/reaim/reaim.config
	fi

	if [ ! "`grep abuild /usr/lib/autotest/bin/job.py`" ] ; then
        cp /usr/lib/autotest/bin/job.py /usr/lib/autotest/bin/job.py.bak
        sed -i 's/self.tmpdir =.*/self.tmpdir ="\/abuild"/' /usr/lib/autotest/bin/job.py
	fi

	if [ ! "`grep abuild /usr/lib/ctcs2/tools/newburn-run`" ] ; then
	cp /usr/lib/ctcs2/tools/test_newburn-run /usr/lib/ctcs2/tools/test_newburn-run.bak
	sed -i 's/newburn-generator.*24h/newburn-generator -B \/abuild\/tmplinux\/ 24h/' /usr/lib/ctcs2/tools/test_newburn-run
	fi
fi

#modify mysql
service mysql start

if [ -x /etc/init.d/mysql ] ; then

grep max_connections /etc/init.d/mysql || ( sed -i 's@\(\$SAFE_MYSQLD\ \\\)@\1\n\t\t\t\-\-max_connections\=1000 \\@g' /etc/init.d/mysql && /etc/init.d/mysql restart )

fi

#modify php.ini for qa_php5 test
cp /etc/php5/apache2/php.ini /etc/php5/apache2/php.ini.bak
sed -i 's/track_errors =.*/track_errors = On/' /etc/php5/apache2/php.ini
sed -i 's/display_errors =.*/display_errors = On/' /etc/php5/apache2/php.ini
sed -i 's/;open_basedir =.*/open_basedir =/' /etc/php5/apache2/php.ini
sed -i 's/error_reporting  =.*/error_reporting  =  E_ALL|E_STRICT/' /etc/php5/apache2/php.ini

#modify autotest-fio timer
cp /usr/lib/ctcs2/tcf/autotest_quick.tcf /usr/lib/ctcs2/tcf/autotest_quick.tcf.bak
lnumber=`grep -n "g 1 autotest-fio /usr/lib/autotest/bin/autotest /usr/lib/autotest/tests/fio/control" /usr/lib/ctcs2/tcf/autotest_quick.tcf | awk -F: '{print $1}'`
(( lnumber-=1 ))
sed -i "${lnumber}s/86400/3600/" /usr/lib/ctcs2/tcf/autotest_quick.tcf

if [ "$ARCH" = "x86_64" -o "$ARCH" = "ppc64" -o "$ARCH" = "s390x" ] ; then
        libs="lib64"
else
        libs="lib"
fi

#modify httpd.conf for qa_apache test
if [ ! "`grep perl_module /etc/apache2/httpd.conf`" ] ; then
cp /etc/apache2/httpd.conf /etc/apache2/httpd.conf.bak
echo "LoadModule perl_module /usr/$libs/apache2/mod_perl.so" >> /etc/apache2/httpd.conf
fi
service apache2 start


for pkg in $TEST_PACKAGES $OTHER_QA_PACKAGES $ADDITIONAL_PACKAGES ; do
        if rpm -q $pkg > /dev/null 2>&1 ; then
                echo -e "$pkg is installed\n"
                echo -e "$pkg is installed\n" >> /root/install_packages_log
        else
                echo -e "$pkg is not installed. Please install needed packages manually.\n"
                echo -e "$pkg is not installed. Please install needed packages manually.\n" >> /root/install_packages_log
#               exit
        fi
done

echo -e "You can run acceptance/kernel/performance/regression tests now.\n"

#start all tests

echo -e "All tests starts now\n"

        echo get sysinfo
        echo -e "\nuname -a\n" > /var/log/qa/sysinfo
        uname -a >> /var/log/qa/sysinfo 2>&1
        echo -e "\ncat /proc/meminfo\n" >> /var/log/qa/sysinfo
        cat /proc/meminfo >> /var/log/qa/sysinfo
        echo -e "\ncat /proc/cpuinfo\n" >> /var/log/qa/sysinfo
        cat /proc/cpuinfo >> /var/log/qa/sysinfo
        echo -e "\ncat /etc/fstab\n" >> /var/log/qa/sysinfo
        cat /etc/fstab >> /var/log/qa/sysinfo
        echo -e "\nfdisk -l\n" >> /var/log/qa/sysinfo
        fdisk -l >> /var/log/qa/sysinfo  2>&1
        echo -e "\nrpm -qa\n" >> /var/log/qa/sysinfo
        rpm -qa >> /var/log/qa/sysinfo  2>&1
        echo -e "\ndmesg\n" >> /var/log/qa/sysinfo
        dmesg >> /var/log/qa/sysinfo  2>&1
        echo -e "\nhwinfo\n" >> /var/log/qa/sysinfo
        hwinfo >> /var/log/qa/sysinfo  2>&1

#Acceptance test start

	echo NEW validation run

	cd /usr/lib/ctcs2

	echo file system stress test runs now
	/usr/lib/ctcs2/tools/run /usr/share/qa/tcf/fs_stress.tcf

	echo process_stress runs now
	/usr/lib/ctcs2/tools/run /usr/share/qa/tcf/process_stress.tcf

	echo sched_stress runs now
	/usr/lib/ctcs2/tools/run /usr/share/qa/tcf/sched_stress.tcf

	echo END of validation tests

#Regression test start

        echo NEW regression run

        cd /usr/share/qa/tools

        echo qa_test_bind runs now
        ./test_bind-run

        echo qa_test_coreutils runs now
        ./test_coreutils-run

        echo qa_test_openssh runs now
        ./test_openssh-run

        echo qa_test_apache_testsuite runs now
        ./test_apache_testsuite-run

        echo qa_test_cpio runs now
        ./test_cpio-run

        echo qa_test_net-snmp runs now
        ./test_net-snmp-run

        echo qa_test_indent runs now
        ./test_indent-run

        echo qa_test_sharutils runs now
        ./test_sharutils-run

        echo qa_test_gzip runs now
        ./test_gzip-run

        echo qa_test_findutils runs now
        ./test_findutils-run

        echo qa_test_postfix runs now
        ./test_postfix-run

        echo qa_test_fetchmail runs now
        ./test_fetchmail-run

        echo qa_test_php5 and qa_php5-server runs now
        ./test_php5-run

        echo qa_test_nfs runs now
        ./test_nfs-run

        echo qa_test_bzip2 runs now
        ./test_bzip2-run

        echo qa_test_apparmor runs now
        ./test_apparmor-run

        echo qa_test_apparmor-profiles runs now
        ./test_apparmor-profiles-run

        echo qa_test_cracklib runs now
        ./test_cracklib-run

        echo END of regression tests

#Performance test start

        ARCH=$HOSTTYPE
        if [ "$ARCH" != "s390x" ] ; then

	echo NEW performance run

	cd /usr/share/qa/tools

	echo qa_test_siege runs now
	./test_siege-run

	echo qa_test_interbench runs now
	./test_interbench-run

	echo qa_test_libmicro runs now
	./test_libmicro-run
	./test_libmicro-bench-run

	echo qa_test_bonnie runs now
	./test_bonnie-run

	echo qa_test_dbench runs now
	mkdir -p /abuild
	./test_dbench-run
	rm -r /abuild/dbench*

	cd /usr/lib/ctcs2/tools

	echo qa_test_reaim runs now
	./test_reaim-run

	echo qa_test_tiobench runs now
	./test_tiobench-run

	echo END of performance tests

        else
                echo "skip performance tests on $ARCH architecture!"
        fi

#Kernel test start

        echo NEW kerneltest run

	cd /usr/lib/ctcs2

        echo qa_test_ltp runs now
        ./tools/test_ltp-run
        ARCH=$HOSTTYPE
        if [ "$ARCH" = "s390x" ] ; then
		rm /test -rf
	fi

        echo qa_test_newburn runs now
        ./tools/test_newburn-run

	cd /usr/share/qa

        echo qa_test_memtester runs now
        ./tools/test_memtester-run

        echo qa_test_memeater runs now
        ./tools/test_memeat-run

	### CHECKME Why use this strange tcf??? Does it contain correct paths?
        echo qa_test_memtst runs now
        /usr/lib/ctcs2/tools/run /suse/rd-qa/tcf/memtst.tcf

        echo qa_test_netperf runs now
        cp /usr/share/qa/tcf/netperf.tcf /usr/share/qa/tcf/netperf.tcf.bak
        sed "s%1h%3h%" /usr/share/qa/tcf/netperf.tcf.bak > /usr/share/qa/tcf/netperf.tcf
        ./tools/test_netperf-run

        echo qa_test_ftpload runs now
        ARCH=$HOSTTYPE
        if [ "$ARCH" != "s390x" ] ; then
		ftpload -d /tmp -c 20 ftp://10.11.136.9/400MB
        else
		if [ ! -d /abuild/ftpload_test ] ; then
			mkdir -p /abuild/ftpload_test
		fi 

		ftpload -d /abuild/ftpload_test -c 20 ftp://10.11.136.9/400MB
	fi

        echo qa_lmbench runs now
        cp /usr/share/qa/qa_test_lmbench/lmbench.tcf /usr/share/qa/qa_test_lmbench/lmbench.tcf.bk
        sed "s%3h%24h%" /usr/share/qa/qa_test_lmbench/lmbench.tcf.bk > /usr/share/qa/qa_test_lmbench/lmbench.tcf
        ./tools/test_lmbench-run

        echo qa_test_sysbench runs now
	if [ $ARCH = "s390x" ] ; then
		if [ ! "`grep abuild /usr/lib/ctcs2/bin/runtest`" ] ; then
        		cp /usr/lib/ctcs2/bin/runtest /usr/lib/ctcs2/bin/runtest.bak
  	      		sed -i "s/testpath=.*/testpath=\"\/abuild\"/g" /usr/lib/ctcs2/bin/runtest
		fi 
		ulimit -s 4096 
	fi
        cd /abuild
	### CHECKME Why use this strange tcf??? Does it contain correct paths?
        /usr/lib/ctcs2/tools/run /suse/rd-qa/tcf/sysbench.tcf
        rm /abuild/testfile*
        rm /usr/lib/ctcs2/bin/testfile*
	killall sysbench
	if [ $ARCH = "s390x" ] ; then
        	cp /usr/lib/ctcs2/bin/runtest.bak /usr/lib/ctcs2/bin/runtest
		ulimit -s 8192
	fi

        echo qa_test_autotest runs now
        cd /abuild
        /usr/lib/ctcs2/tools/run /usr/lib/ctcs2/tcf/autotest_quick.tcf
        rm /abuild/testfile*
        rm /usr/lib/ctcs2/bin/testfile*

        echo END of Kernel tests

	echo "!!!All tests have finished. Next is to analyze results."
	/usr/share/hamsta/testscript/report
	/usr/share/qa/tools/remote_qa_db_report.pl -b -c "QA_KERNEL_launch_all_test_sles11-sp2"
]]>
</command>
            <!-- Optional -->
            <directory>/</directory>
	    <timeout>604800</timeout> <!-- one week -->
        </worker>
    </commands>
</job>
