#!/bin/bash

curl=curl

printhelp()
{
	cmd=`basename $0`
	echo -e "Usage:\t$cmd <CML source> <autoyast XML>"
	echo -e "  or :\t$cmd <CML source> [<cmdline arguments...>]"
	echo
	echo -e "Example:\t$cmd ftp://cml.suse.cz/netboot/find/openSUSE-11.0-RC3-DVD-ppc64 http://bender.suse.cz/autoinst/autoinst_vulture.xml"
	echo -e "\t(yet you perhaps would like to use IP addresses instead of hostnames...)"
	echo
	exit 1
}

if [ "$#" -lt 1 -o "$1" == "--help" ]
then
	printhelp
fi

insturl=$1
shift
arch=`uname -m`

curlprobe()
{
	local url="$1"
	$curl -o /dev/null -I -L -f -s "$url" || return 1
}

if [ $# -lt 2 ]
then
	hostip=`ifconfig eth0 | perl -ne 'print $1 if $_=~/addr:((\d{1,3}\.){3}\d{1,3})/'`
	if [ $# -eq 1 ]
	then
		ay_xml=$1
		shift
		params="vga=normal autoyast=$ay_xml netdevice=eth0 netwait=10 $hostip install=$insturl"
	else
		params="vga=normal netdevice=eth0 netwait=10 $hostip install=$insturl"
	fi
else
	params="$@"
fi

###add vnc and ssh tag to kernel parameter #######
#params="$params $ssh_enable $vnc_enable"
bootloaderconf=/etc/lilo.conf
imagedir='/boot/loader'
TMPFILE=`mktemp -q /tmp/distinst.XXXXXX`
if [ $? -ne 0 ]
then
	echo "$0: Cannot create temp file, exiting."
	exit 1
fi
imagedir=`mktemp -d -q $imagedir-XXXXXX`
if [ $? -ne 0 ]
then
	echo "$0: Cannot create temp directory, exiting"
	exit 1
fi
mkdir -p "$imagedir"

cleanup()
{
	[ -f $TMPFILE ] && rm $TMPFILE
}
trap cleanup EXIT

kernelurl="$insturl/suseboot/inst64"
initrdurl="$insturl/suseboot/initrd64"

# This is to support the case that PPC might not have an initrd in the repo
skipInitrd="no"

$curl -f -L -o "$imagedir"/inst64 "$kernelurl"
$curl -L -o "$imagedir"/initrd64 "$initrdurl"

# Since the install kernel is required, it's a failure if it isn't there
if [ ! -e "$imagedir"/inst64 ]
then
	echo "Could not download image(inst64) from '$insturl' to '$imagedir'"
	exit 1
fi

# But since the initrd is optional, it can be skipped if it isn't there
if [ ! -e "$imagedir"/initrd64 ]
then
	skipInitrd="yes"
fi

title="Installation"
count=`grep -c "label = Installation" $bootloaderconf`
if [ $count -gt 0 ]
then
    title="${title}$((count+1))"
fi

echo "" >> $bootloaderconf
echo "image = $imagedir/inst64" >> $bootloaderconf
echo "    label = $title" >> $bootloaderconf
echo "    optional" >>$bootloaderconf
echo "    append = \"$params\"" >> $bootloaderconf
if [ "$skipInitrd" == "no" ]
then
	echo "    initrd = $imagedir/initrd64" >> $bootloaderconf
fi
cat $bootloaderconf | grep root -m 1 >> $bootloaderconf
sync

# start the installation with reboot
sed "s/^default.*$/default = $title/" $bootloaderconf > $TMPFILE
cp -v $TMPFILE $bootloaderconf	# workaround, instead of using perl
echo "edited bootloader config"
lilo

echo "done."

